@page "/"
@using System.ComponentModel;
@implements IDisposable
@inject Heater Heater

@code {
    // TODO move property change triggers to a base class
    protected override void OnInitialized()
    {
        Heater.PropertyChanged += StateChangedHandler;
    }

    public void Dispose()
    {
        Heater.PropertyChanged -= StateChangedHandler;
    }

    void StateChangedHandler(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    IList<HeaterMode> HeaterModes = new[] { HeaterMode.Schedule, HeaterMode.Override, HeaterMode.Off };

    int SelectedHeaterModeIndex
    {
        get => HeaterModes.IndexOf(Heater.Mode);
        set => Heater.Mode = HeaterModes[value];
    }
}

<PageTitle>domo</PageTitle>

<MudGrid>
    <MudItem xs="12">
    </MudItem>

    <MudItem xs="12">
        <FlameAnimation IsOn=@Heater.IsActivated />
    </MudItem>

    <MudItem xs="12">
        <MudTabs Outlined="true" Centered="true" MinimumTabWidth="130px" Rounded="true" Border="true"
                 ApplyEffectsToContainer="true" @bind-ActivePanelIndex="SelectedHeaterModeIndex">
            <MudTabPanel Text="@(HeaterModes[0].ToString())" />
            <MudTabPanel Text="@(HeaterModes[1].ToString())">
                <div class="mx-3 mb-3">
                    <OverrideMenu />
                </div>
            </MudTabPanel>
            <MudTabPanel Text="@(HeaterModes[2].ToString())" />
        </MudTabs>
    </MudItem>

    <MudItem xs="12">
        <HeaterLevelEditor />
    </MudItem>

    <MudItem xs="12">
        <ScheduleEditor />
    </MudItem>
</MudGrid>