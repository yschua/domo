@using System.ComponentModel;
@implements IDisposable
@inject Heater Heater

@code {
    protected override void OnInitialized()
    {
        Heater.PropertyChanged += StateChangedHandler;
    }

    public void Dispose()
    {
        Heater.PropertyChanged -= StateChangedHandler;
    }

    void StateChangedHandler(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(Heater.LowLevelSetting) || 
            e.PropertyName == nameof(Heater.HighLevelSetting))
        {
            InvokeAsync(StateHasChanged);
        }
    }

    HeaterLevel SelectedLevel { get; set; }

    HeaterLevelSetting SelectedHeaterLevelSetting => SelectedLevel switch
    {
        HeaterLevel.Low => Heater.LowLevelSetting,
        HeaterLevel.High => Heater.HighLevelSetting
    };
}

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h6">Level Settings</MudText>
    </MudItem>
    <MudItem xs="12">
        <MudSelect T="HeaterLevel" Variant="Variant.Outlined" Label="Level" @bind-Value="SelectedLevel">
            <MudSelectItem Value="HeaterLevel.Low" />
            <MudSelectItem Value="HeaterLevel.High" />
        </MudSelect>
    </MudItem>
    <MudItem xs="6">
        <HeaterLevelDurationEditor Label="On Cycle" Setting="SelectedHeaterLevelSetting.OnCycleDuration" />
    </MudItem>
    <MudItem xs="6">
        <HeaterLevelDurationEditor Label="Off Cycle" Setting="SelectedHeaterLevelSetting.OffCycleDuration" />
    </MudItem>
</MudGrid>